"""
This python program scans the data generated by Archi and looks for the largest change in tactics
"""

import csv
import os

import pandas as pd

results_directory = r"C:\Users\Stern\Desktop\Archi\results"
directory_names = os.listdir(results_directory)  # get all folders' names in the result directory

commits = []
for directory in directory_names:  # loop through all the files and folders
    # check whether the current object is a folder or not
    if os.path.isdir(os.path.join(os.path.abspath(results_directory), directory)):
        commits.append([int(directory.split(sep='_')[0]), directory.split(sep='_')[1]])


commits = sorted(commits)  # Sort by first element
last_iteration = None
results = dict()
minimum_difference = 0.001


for directory in commits:
    commit_nr = directory[0]
    commit_hash = directory[1]

    # Read to pandas dataframe and filter columns
    df = pd.read_csv(results_directory + '\\' + str(commit_nr) + '_' + commit_hash + r'\AllTactics.csv')
    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
    df = df.loc[:, ~df.columns.str.contains('File')]
    df = df.loc[:, ~df.columns.str.contains('Id')]

    # Length of the AllTactics.csv (amount of .java files)
    length = df.shape[0]

    # Get average
    average = df.sum().divide(length)

    if last_iteration is None:
        last_iteration = average
        continue

    deltas = last_iteration.subtract(average)
    last_iteration = average

    if commit_nr % 100 == 0:
        print('Progress:', commit_nr / len(commits), 'Iteration:', commit_nr)

    if not (deltas > minimum_difference).any():
        continue

    sorted_deltas = deltas.sort_values(ascending=False)

    results[str(commit_nr) + ', ' + commit_hash] = []
    for i, v in sorted_deltas.items():
        if v > minimum_difference:
            results[str(commit_nr) + ', ' + commit_hash].append([i, v])

    print(directory)
    print(sorted_deltas)

f = open('commits_found.csv', 'w', newline='')
writer = csv.writer(f)
writer.writerow(['sep=,'])

# Sort tactics in descending order
sorted_results = sorted(results.items(), key=lambda e: e[1][0][1], reverse=True)


for key, item in sorted_results:
    tactics = key.split(", ")
    for tactic in item:
        tactics.extend(tactic)
    writer.writerow(tactics)
f.close()
